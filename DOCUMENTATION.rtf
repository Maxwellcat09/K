an Operation is defined by the Starting and Ending brackets, as you can see:
start {{
...
}} end

Curly braces always close on a different line than they start, and never end on a line that has its own code
Parenthesis always close on the same line and only contain one variable (or array)

loop (cscInf) {
//your code
} until {
chku

Blocks are inside Operations, they can be defined via
setbl(//start line number,// end line number)
they can be skipped until jumped to if a /: is placed at the beginning of the first line that the block applies on, and a :/ on the end of the last line

All code, excluding CFG, must be in an Operation

Variables can be named anything

Datatypes
integer
bool
float
character
string

Math
icr - increases a variable by 1. icr intvariable
dcr - decreases a variable by 1. dcr intvariable
add - adds specified number to a variable. add (7) intvariable
sub - opposite of add. sub (6) intvariable
mul - multiplies specified number by specified variable. mul (3) intvariable
div - opposite of mul. div (2) intvariable
conv - converts a variable's datatype to the specified datatype
pie - multiply a variable by Pi, preciseness can be specified
rand - when placed just before an 2 number integer or decimal in a setvar statement, it will pick a random number between the numbers and write it to the variable. setVar randomvariable rand(1, 100)

Basic
declare - declares a variables name, data type, whether its an array or not, and scope
setVar - sets the value of a variable
writeVar - pulls the first value (or values in an array) from code in its curly braces. 
duplVar - reads a variable and prints it to a different variable. duplVar (sourcevariable) (destinationvariable)
print - prints a variable or a string in quotes to one line
if - checks if a variable is true, can be modified by NOT logic with if(not), can only use one variable, but infinitely many times one its own
andIf - allows you to use more than one variable in an if statement, goes on the line after the If's variables, can also be modified with NOT
chkuse - allows you to check if a variable was used or written toon a certain line or lines in your code. can be used like: chkuse (3-7) variable3
endVar - deletes a file variable at the end of current operation to prevent unnecessary usage of RAM. endVar (uselessVar)

advanced
kWindow - Summons a Windows 10 window for drawing or buttons. kWindow (resolution, uses x== and y== if config is enabled) (window ID) (window Title) (resizeable? bool)
mouse.getPos - grabs the mouse position, must be in a writeVar

Flow
setBl - Creates a block, as stated earlier, blocks can be skipped until jumped to with jumpBl if you put /: on the start of the block and :/ on the end. setBl (9,21) "blockWhatever"
jumpBl - Jumps to the beginning of your block. jumpBl (blockWhatever)
jumpLn - jumps to a line in your code.
loop - Loops a code for a specified time amount of runs.
Example:
loop (3) {
...
}
cscInf - a variable that can be placed in the run amount of loops, runs until break statement is hit, program is closed or loop is edited by external file, means Cosmic Infinity, a reference to Gloryhammer
break - breaks a loop prematurely
delay - delays entire flow for a specified amount of operations. delay (10)
fullDelay - sets the amount of delays between an operation. fullDelay (5)
tay - skip over a specified amount of lines. tay (9)

Code and file management/editing
editLn - allows you to edit a line in your code. editLn (7) "/:print "this text in the beginning of a block has been edited with editLn""
$backup - backs up the latest version of the code before running to a .kb (K Backup) file. $backup "codefilebackup"
$call - calls a .k file to start running. $call (external.k)
$ser - create an external file. $ser (path\) (filename) (extension)
$serEdit - edit an external file's line. $serEdit (22) (path\external.k) "endvar (dumbVar)
$serDel - Deletes an external file. $serDel (Polly.png)

Graphics
drawRaw - use this to start manual drawing (pixel, fillpixel and polygon). drawRaw (kWindow to draw to) {multiline drawing code}
hsla/rgba/cmyk - color models that you can use for manual drawing
hslaplus - a proprietary version of HSLA that uses 255 for alpha instead of 0-1
polygon - draws a polygon based on coordinates. 
fillPixel - draws a rectangle based on coordinates.
pixel - colors a singular pixel.
drawImg - draws an image from a file, accepts PNG and JPG. drawImg (Jake.jpg)
wash - clear all pixels from the screen

Audio
wave - Produces a digital sound wave, would likely need an extension to work right. wave (wavelength) (amplitude) (frequency) (timeperiod) (velocity)
playSnd - plays audio from a file, accepts .wav files. playSnd (Wimbledon.wav)

Interaction
button - a button is an clickable object that can trigger a series of events, and can be drawn on (and/or printed on top of) to make a custom button. you do not need to use drawraw when drawing for a button, only works in app windows.
button ((clickbox x/y) (window id)
  (drawing code)
  (print))
    on.Click {
Code to execute when clicked
              }
input - an input allows a user to write to a variable through the console, input can be customized with print
input (variableuser) (integer) {
print "what is your favorite number?"
}

Config
CFG - starts a cfg section, can only be used once at the beginning of your code, behind the first "start {{"
USEXYTRUE/USEXYFALSE - toggles whether coordinates need x==?,y==? to function, if set to USEXYFALSE, they will be reduced to ?,? only

Internet
$link - can be used in button as executed code, will open a link in the default browser. $link (https://www.youtube.com/watch?v=YGV6bCTMM5w)
$hPost - Sends a POST request method to an HTTP link. $hPost /yourendpoint (yourhost.com) (application/content) (Bearer accessToken) { key (value) }
$hGet - Sends a GET request method to an HTTP link. $hGet /yourendpoint (yourhost.com) (application/content) (Bearer accessToken) { key (value) }
$hPut - Sends a PUT request method to an HTTP link. Syntax: $hPut /yourendpoint (yourhost.com) (application/content) (Bearer accessToken) { key (value) }
$hDelete - Sends a DELETE request method to an HTTP link. Syntax: $hDelete /yourendpoint (yourhost.com) (application/content) (Bearer accessToken) { key (value) }

//This is a singleline comment
/c this is a multi 
line comment c/
