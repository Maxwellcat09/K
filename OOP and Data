

1. Creation of Classes, Objects, Variables, ETC.
  1a. Simples
--------------------
variable c OR var c
This syntax will create a "variable", variables are singular values that only hold one piece of data, like an Integer, Decimal, String or other datatype.
usage:

var c "variable" (int);
Creates an integer named "variable"

variable c "HohnDojName" (string);
Creates a string named "HohnDojName"

--------------------
array c
This creates an "array", Arrays can hold multiple values of the same datatype.
usage:

array c "array" (decimal) (1-10);
Creates a decimal array called "array"

--------------------
mixedArray c OR mArray c
This creates a "mixed array", Mixed arrays can hold multiple values of multiple datatypes.
usage:

mArray c "mixedArray" {
(1-50) (int)
(51-100) (dec)
};
Creates a Mixed Array called "mixedArray" with data 1-50 being integers, and 51-100 being decimals.

--------------------

  1b. OOP Syntax
--------------------
class c
Creates a class, a fundamental of OOP languages and a "blueprint" for objects.
usage:

class c public "class" dat {
"name:" (string);
"age:" (int);
} met {
speak{
print("my name is " ((class)(object)name:));
}
};
Creates a class called "class" which is public (accessible by all "linked" files), this also has a method (within the met curly braces) called "speak" which prints the name of the object defined. the (class) is to identify where to pull the method from
class c file "state" dat {
"name:" (string);
"capital:" (string);
"population:" (int);
} met {
};
Creates a class called "state" which is file-accessible (accessible by only code in the file)
class c sub "city" dat {
"name:" (string);
"population:" (int);
} met {
};
Creates a class called "city" which is only sub-file-accessible (accessible only by code between the start{{ and }}end brackets, aka sub-file)

--------------------
object c
Creates an object based on a class, another fundamental of OOP languages.
usage:

object c file "hohninfo" (class) {
name:("Hohn Doj");
age:(27);
}
Creates an object called "hohninfo" with datapoints of the name Hohn Doj and age 27 that can be called by methods within the file.

--------------------
func c
Creates a function, fundamentaly the same as a method, however is independent from a class like methods are.
usage:

func c public "call_me funky" {
print("this is a function")
met(class(speak(hohninfo)))
}
This function, when called would print "this is a function" and would then run the method from class called speak, using the hohninfo object's information

--------------------
