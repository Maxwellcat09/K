

1. Creation of Classes, Objects, Variables, ETC.
  1a. Simples

--------------------
variable c OR var c
This syntax will create a "variable", variables are singular values that only hold one piece of data, like an Integer, Decimal, String or other datatype.
usage:

var c file "variable" (int);
Creates an integer named "variable" which is usable by the entire file

variable c sub "HohnDojName" (string);
Creates a string named "HohnDojName" which is usable by the sub-file

--------------------
array c
This creates an "array", Arrays can hold multiple values of the same datatype.
usage:

array c public "array" (decimal) (1-10);
Creates a decimal array called "array" which can be used by all files that can see it

--------------------
mixedArray c OR mArray c
This creates a "mixed array", Mixed arrays can hold multiple values of multiple datatypes.
usage:

mArray c "mixedArray" {
(1-50) (int);
(51-100) (dec);
}
Creates a Mixed Array called "mixedArray" with data 1-50 being integers, and 51-100 being decimals.

--------------------

  1b. OOP Syntax
--------------------
class c
Creates a class, a fundamental of OOP languages and a "blueprint" for objects.
usage:

class c publicl "class" dat {
"name:" (string);
"age:" (int);
} met {
speak{
print("my name is " ((class)(object)name:));
}
}
Creates a class called "class" which is publicl (accessible by all "linked" files), this also has a method (within the met curly braces) called "speak" which prints the name of the object defined. the (class) is to identify where to pull the method from
class c file "state" dat {
"name:" (string);
"capital:" (string);
"population:" (int);
} met {
}
Creates a class called "state" which is file-accessible (accessible by only code in the file)
class c sub "city" dat {
"name:" (string);
"population:" (int);
} met {
}
Creates a class called "city" which is only sub-file-accessible (accessible only by code between the start{{ and }}end brackets, aka sub-file)

--------------------
object c
Creates an object based on a class, another fundamental of OOP languages. Variables can be used in data for objects
usage:

object c file "hohninfo" (class) {
name:("Hohn Doj");
age:(27);
}
Creates an object called "hohninfo" with datapoints of the name Hohn Doj and age 27 that can be called by methods within the file.

--------------------
func c
Creates a function, fundamentaly the same as a method, however is independent from a class like methods are.
usage:

func c public "call_me funky" {
print("this is a function");
met(hohninfo)(class(speak));
}
This function, when called would print "this is a function" and would then run the method from class called speak, using the hohninfo object's information

--------------------


2. Data Usage

--------------------
met r
Runs a methods code, the r is a keyword for run.
usage:

met(hohninfo)(class(speak));
Runs the "speak" method from the class named "class" using the info from "hohninfo"

--------------------
func r
Runs a function's code
usage:

func r (call_me funky);
this would run the function "call_me funky"

--------------------


3. Manipulation

--------------------
variable s OR var s
Sets the value of a variable depending on its datatype, s is the keyword for "set"
usage:

var s (variable) (17)
Sets the variable named "variable" to a value of 17

--------------------
array s
Sets the value of a number in an array, or uses automation to make things easier

array s (array) {
(4,27)
//the first number is the array number that is being set, the second number is the value it is being changed to
(12,3)
(15,8)
}
Sets the value of variable 4 in an array called "array" to an integer of 27, variable 12 to 3, and variable 15 to 8

array s (array) {
autos(1-50)(ascending(1-50))
autos(51-100)(descending(49-1))
}
Sets array variables 1-50 to ascending order from 1 to 50, and variables 51-100 to numbers 49-1

--------------------
mixedArray s OR mArray s
Works the same way as array s, just has support for the mixed part of mixed array 
usage:

array s (array) {
autos(1-50)(ascending(1-50)(int))
autos(51-100)(descending(49.0000-1.0000)(dec))
}
Sets array variables 1-50 to ascending order from 1 to 50 in integer form, and variables 51-100 to numbers 49-1 in decimal form

--------------------
